Boggle (Find all possible words in a board of characters)

Given a dictionary, a method to do lookup in dictionary and a M x N board where every cell has one character. Find all possible words that can be formed by a sequence of adjacent characters. Note that we can move to any of 8 adjacent characters, but a word should not have multiple instances of same cell

 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication1;

import java.util.*;

/**
 *
 * @author jaint7309
 */
public class Boggle {
    
   static String dict[] = {"POSE", "SIT"};
   
   static Set<String> hs = new HashSet<>();
     public static void main(String[] args) {
         
         char boggle[][] = {{'U','R','A','L'},{'E','T','U','L'},{'R','C','I','S'},{'P','O','S','E'}};
                         
 
   
         findWords(boggle);
   
     
     }
     
     
     static void findWords(char boggle[][], boolean visited[][], int i,int j, String str,int M,int N)
    {
        visited[i][j] = true;
    str = str + boggle[i][j];
 
    // If str is present in dictionary, then print it
    if (isWord(str) && !hs.contains(str))
    {
            hs.add(str);
            System.out.println(str);
    }
 
    // Traverse 8 adjacent cells of boggle[i][j]
 
    for (int row=i-1; row<=i+1 && row<M; row++)
    {
      for (int col=j-1; col<=j+1 && col<N; col++)
      {
        if (row>=0 && col>=0 && !visited[row][col])
          findWords(boggle,visited, row, col, str,M,N);
      }
    
           }
    // Erase current character from string and mark visited
    // of current cell as false
    str = str.substring(0,str.length()-1);
    visited[i][j] = false;
        
       }
     
     static void findWords(char boggle[][])
{
    // Mark all characters as not visited
    
    int M = boggle.length;
    
    int N = boggle[0].length;
    
    boolean visited[][] = new boolean[M][N];
 
    // Initialize current string
    String str = "";
    
    
 
    // Consider every character and look for all words
    // starting with this character
    for (int i=0; i<M; i++)
       for (int j=0; j<N; j++)
             findWords(boggle, visited, i, j, str,boggle.length, boggle[0].length);
}
     
    static boolean isWord(String str)
{
    // Linearly search all words
    for (int i=0; i<dict.length; i++)
    {
        if(str.equalsIgnoreCase(dict[i]))
          return true;
    }
    return false;
}
     }
